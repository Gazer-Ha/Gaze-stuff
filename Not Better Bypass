local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
cloneref = cloneref or function(o) return o end
local COREGUI = cloneref(game:GetService("CoreGui")) or game:GetService("CoreGui") or game.Players.LocalPlayer:WaitForChild("PlayerGui")
local LocalPlayer = Players.LocalPlayer


local Notifbro = {}

function Notify(titletxt, text, time)
    
    coroutine.wrap(function()
        local GUI = Instance.new("ScreenGui")
        local Main = Instance.new("Frame", GUI)
        local title = Instance.new("TextLabel", Main)
        local message = Instance.new("TextLabel", Main)

        GUI.Name = "BackgroundNotif"
        GUI.Parent = COREGUI

        local sw = workspace.CurrentCamera.ViewportSize.X
        local sh = workspace.CurrentCamera.ViewportSize.Y
        local nh = sh / 7
        local nw = sw / 5

        Main.Name = "MainFrame"
        Main.BackgroundColor3 = Color3.new(0.156863, 0.156863, 0.156863)
        Main.BackgroundTransparency = 0.2
        Main.BorderSizePixel = 0
        Main.Size = UDim2.new(0, nw, 0, nh)

        title.BackgroundColor3 = Color3.new(0, 0, 0)
        title.BackgroundTransparency = 0.9
        title.Size = UDim2.new(1, 0, 0, nh / 2)
        title.Font = Enum.Font.GothamBold
        title.Text = titletxt
        title.TextColor3 = Color3.new(1, 1, 1)
        title.TextScaled = true

        message.BackgroundColor3 = Color3.new(0, 0, 0)
        message.BackgroundTransparency = 1
        message.Position = UDim2.new(0, 0, 0, nh / 2)
        message.Size = UDim2.new(1, 0, 1, -nh / 2)
        message.Font = Enum.Font.Gotham
        message.Text = text
        message.TextColor3 = Color3.new(1, 1, 1)
        message.TextScaled = true

        local offset = 50
        for _, notif in ipairs(Notifbro) do
            offset = offset + notif.Size.Y.Offset + 10
        end

        Main.Position = UDim2.new(1, 5, 0, offset)
        table.insert(Notifbro, Main)

        task.wait(0.1)
        Main:TweenPosition(UDim2.new(1, -nw, 0, offset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)
        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.5, true)
        task.wait(0.5)
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.2, true)

        task.wait(time)

        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)
        task.wait(0.2)
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)
        task.wait(0.2)
        Main:TweenPosition(UDim2.new(1, 5, 0, offset), Enum.EasingDirection.In, Enum.EasingStyle.Bounce, 0.5, true)
        task.wait(0.5)

        GUI:Destroy()
        for i, notif in ipairs(Notifbro) do
            if notif == Main then
                table.remove(Notifbro, i)
                break
            end
        end

        for i, notif in ipairs(Notifbro) do
            local newOffset = 50 + (nh + 10) * (i - 1)
            notif:TweenPosition(UDim2.new(1, -nw, 0, newOffset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)
        end
    end)()
end

local guiName = "NOT BETTER"

if COREGUI:FindFirstChild(guiName) then
    Notify("Error","Script Already Executed", 1)
    return
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = guiName
screenGui.Parent = COREGUI


local function bypassEncode(str)
	local INV = {"\u{FE2D}", "\u{FE2B}", "\u{FE2D}"}
	local map = {["0"]="０",["1"]="１",["2"]="２",["3"]="３",["4"]="４",["5"]="５",["6"]="６",["7"]="７",["8"]="８",["9"]="９",[" "]="\b"}
	local function r() return INV[math.random(#INV)] end
	return str:gsub(".", function(c)
		if c:match("%a") then return r()..c..r()
		  elseif map[c] then return map[c]
		  else return c end end) end

local function splitByDelimiter(str, delim)
	local result = {}
	for word in string.gmatch(str, "([^"..delim.."]+)") do
		table.insert(result, word)
	end
	return result
end

local function splitByBypassedChunks(bypassed, maxLen)
	local parts, current = {}, ""
	local words = splitByDelimiter(bypassed, "\b")
	for _, word in ipairs(words) do
	local next = current ~= "" and current.."\b"..word or word
		if #next > maxLen then
			if current ~= "" then table.insert(parts, current) end
			current = word
		else
			current = next
		  end end
	if current ~= "" then table.insert(parts, current) end
	return parts
  end

local CachedChannels = {}

local function sendBypassedMessage(message, recipient)
	local firstChar = message:sub(1, 1)
	local skipEncoding = firstChar == "/" or firstChar == "-" or firstChar == ";" or firstChar == ":" or firstChar == "!"

	local finalMessages = {}

	if skipEncoding then
		table.insert(finalMessages, message) 
	else
		local prefix, suffix = "\u{05BE}>ˑ\u{0008}", "ˑ\u{0008}"
		local bypassed = bypassEncode(message):gsub(" ", "\b")
		local chunks = splitByBypassedChunks(bypassed, 140)
		for _, chunk in ipairs(chunks) do
			table.insert(finalMessages, prefix .. chunk .. suffix)
		end
	end

	for _, final in ipairs(finalMessages) do
		local channel = nil

		if recipient and recipient ~= "All" then
			channel = CachedChannels[recipient]
			if not channel or not channel:IsDescendantOf(TextChatService)
				or not channel:FindFirstChild(recipient)
				or not channel:FindFirstChild(LocalPlayer.Name) then
				CachedChannels[recipient] = nil
				channel = nil
			end
			if not channel then
				for _, ch in pairs(TextChatService.TextChannels:GetChildren()) do
					if ch.Name:find("RBXWhisper:") and ch:FindFirstChild(recipient) then
						channel = ch
						CachedChannels[recipient] = ch
						break
					end end end end

		if not channel then
			channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
				or TextChatService.TextChannels:FindFirstChild("General")
		end

		if channel then
			channel:SendAsync(final)
		else
			local ev = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
			if ev then
				local say = ev:FindFirstChild("SayMessageRequest")
				if say then say:FireServer(final, "All") end
			end end

		task.wait(0.3)
	end end

local function Match(str, pattern)
	return string.match(str, pattern)
end

local function getTargetName(targetChip)
	if targetChip and targetChip:IsA("TextButton") then
		local displayName = Match(targetChip.Text or "", "^%[To%s+(.-)%]$")
		if displayName and displayName ~= "" then
			for _, plr in ipairs(Players:GetPlayers()) do
				if plr.DisplayName:lower() == displayName:lower() then
					return plr.Name
	  			end end end end

	       return "All"
           end


task.spawn(function()
	repeat task.wait() until COREGUI:FindFirstChild("ExperienceChat")
	local experienceChat = COREGUI:WaitForChild("ExperienceChat")
	local appLayout = experienceChat:FindFirstChild("appLayout")
	if not appLayout then return end

	local chatInputBar = appLayout:FindFirstChild("chatInputBar")
	if not chatInputBar then return end

	local background = chatInputBar:FindFirstChild("Background")
	if not background then return end

	local container = background:FindFirstChild("Container")
	if not container then return end

	local textContainer = container:FindFirstChild("TextContainer")
	local textBoxContainer = textContainer and textContainer:FindFirstChild("TextBoxContainer")
	local chatBox = textBoxContainer and textBoxContainer:FindFirstChild("TextBox")
	local sendButton = container:FindFirstChild("SendButton")
	local targetChip = textContainer and textContainer:FindFirstChild("TargetChannelChip")

	
	if chatBox then
		chatBox.FocusLost:Connect(function(enterPressed)
		if enterPressed and chatBox.Text ~= "" then
		local msg = chatBox.Text
		local recipient = getTargetName(targetChip)
		chatBox.Text = ""
                local lowered = msg:lower()
		task.defer(function()
		sendBypassedMessage(lowered, recipient)
		end) end end) end

	
	if sendButton then
	sendButton:Destroy()
end
end)

Notify("Better? Bypass", "Bypass active", 5)
Notify("watch tutorial", "youtube.com/shorts/z1yCdkbXTi4", 60)
